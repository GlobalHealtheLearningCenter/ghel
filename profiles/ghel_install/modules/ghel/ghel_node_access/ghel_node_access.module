<?php

define('GHEL_NODE_ACCESS_GID_ANON', 0);
define('GHEL_NODE_ACCESS_GID_AUTH', 1);
define('GHEL_NODE_ACCESS_COURSE_MEMBER', 'ghel_node_access_course_member');
define('GHEL_NODE_ACCESS_COURSE_ADMINISTRATOR', 'ghel_node_access_course_admin');

/**
 * Our module is consulted under the conditions that a module implementing
 * hook_node_axxess() does not explictly DENY or explicitly ALLOW the given
 * viewing of the given node.
 */


/**
 * Implementation of hook_node_grants().
 */
function ghel_node_access_node_grants($account, $op) {

  // We only want to adjust view permissions
  if ($op == 'view') {
    if (array_key_exists(DRUPAL_AUTHENTICATED_RID, $account->roles)) {
      $grants['ghel_node_access'] = array(
        GHEL_NODE_ACCESS_GID_AUTH,
      );
      // Add node grants for nodes a user may be a member of.
      if ($groups = og_get_entity_groups('user', $account)) {
        foreach ($groups as $group_type => $gids) {
          if ( $group_type != 'node' ) {
            continue;
          }
          else {
            foreach ($gids as $gid) {
              // Add all nodes as potential grants, we sort the details
              // out in hook_node_access_records for ghel_course nodes. This
              // avoids a potential extra node_load() to check type.
              $roles = og_get_user_roles($group_type, $gid, $account->uid);

              if ( in_array(GHEL_COURSE_ADMINISTRATOR, array_keys($roles) ) ) {
                $grants[GHEL_NODE_ACCESS_COURSE_ADMINISTRATOR][] = $gid;
              }
              else if ( in_array(GHEL_COURSE_ROLE_MEMBER, array_keys($roles) ) ) {
                // Only add the course member grant if they are not an admin so
                // we can add/drop access records accordingly.
                $grants[GHEL_NODE_ACCESS_COURSE_MEMBER][] = $gid;
              }

            }
          }
        }
      }
    }
    else {
      // anonymous user
      $grants['ghel_node_access'] = array(
        GHEL_NODE_ACCESS_GID_ANON,
      );
    }
    return $grants;
  }
}

/**
 * Implementation of hook_node_access_records().
 */
function ghel_node_access_node_access_records($node) {
  // Set grants for course content types
  $course_content_types = ghel_course_get_course_content_types();
  $course = ghel_course_get_course($node);
  $grants = array();
  if (in_array($node->type, $course_content_types) ) {
    if ( $course->workflow == GHEL_WORKFLOW_STATE_PUBLISHED ) {
      // Grant access for auth, which is inclusive of course members and
      // course admins.
      if ( $node->status == NODE_PUBLISHED) {
        $grants[] = array(
          'realm' => 'ghel_node_access',
          'gid' => GHEL_NODE_ACCESS_GID_AUTH,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
    }
  }
  elseif ($node->type == 'ghel_course' ) {
    /*
                                published   under review  feedback  archived
      Non-member (auth & anon)  yes         no            no        no
      course member             yes         yes           yes       yes (via OG access)
      course administrator      yes         yes           yes       yes (via OG access)
    */

    // Course admins always have view access
    $grants[] = array(
      'realm' => GHEL_NODE_ACCESS_COURSE_ADMINISTRATOR,
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );

    // Set member & non-member access based on workflow
    switch ( $node->workflow ) {
      case GHEL_WORKFLOW_STATE_PUBLISHED:
        $grants[] = array(
          'realm' => 'ghel_node_access',
          'gid' => GHEL_NODE_ACCESS_GID_ANON,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
        $grants[] = array(
          'realm' => 'ghel_node_access',
          'gid' => GHEL_NODE_ACCESS_GID_AUTH,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
        $grants[] = array(
          'realm' => GHEL_NODE_ACCESS_COURSE_MEMBER,
          'gid' => $node->nid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
        break;
      case GHEL_WORKFLOW_STATE_FEEDBACK:
      case GHEL_WORKFLOW_STATE_UNDER_REVIEW:
        $grants[] = array(
          'realm' => 'ghel_node_access',
          'gid' => GHEL_NODE_ACCESS_GID_ANON,
          'grant_view' => 0,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
        $grants[] = array(
          'realm' => GHEL_NODE_ACCESS_COURSE_MEMBER,
          'gid' => $node->nid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
        break;
      default:
        $grants[] = array(
          'realm' => 'ghel_node_access',
          'gid' => GHEL_NODE_ACCESS_GID_ANON,
          'grant_view' => 0,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
    }
  }

  return $grants;
}
